{
    "garden-example": {
        "garden-main.component.css": ".title {\n    font-size: 20px;\n    color: #000;\n    margin-bottom: 20px;\n}\n",
        "garden-main.component.html": "<div id=\"garden\"></div>\n<div id=\"display-case\"></div>\n",
        "garden-main.component.test.ts": "import { describe, expect, test, beforeAll } from \"@jest/globals\";\nimport { GardenMainComponent } from \"./garden-main.component\";\nimport { bootstrap } from \"@gsilber/webez\";\n\ndescribe(\"GardenMainComponent\", () => {\n    let component: any = undefined;\n    beforeAll(() => {\n        const html: string = `<div>Testing Environment</div><div id='main-target'></div>`;\n        component = bootstrap<GardenMainComponent>(GardenMainComponent, html);\n    });\n    describe(\"Constructor\", () => {\n        test(\"Create Instance\", () => {\n            expect(component).toBeInstanceOf(GardenMainComponent);\n        });\n    });\n});\n",
        "garden-main.component.ts": "import html from \"./garden-main.component.html\";\nimport css from \"./garden-main.component.css\";\nimport { EzComponent } from \"@gsilber/webez\";\nimport { GardenComponent } from \"./garden/garden.component\";\nimport { DisplayCaseComponent } from \"./display-case/display-case.component\";\nimport { PlantComponent } from \"./plant/plant.component\";\n\n/**\n * @description GardenMainComponent is the main component of the app\n * @extends EzComponent\n *\n */\nexport class GardenMainComponent extends EzComponent {\n    constructor() {\n        super(html, css);\n\n        const garden = new GardenComponent();\n        this.addComponent(garden, \"garden\");\n        const displayCase = new DisplayCaseComponent();\n        this.addComponent(displayCase, \"display-case\");\n\n        garden.gatherEvent.subscribe((plants: PlantComponent[]) => {\n            displayCase.addPlants(plants);\n        });\n    }\n}\n",
        "readme.md": "A component that has inter-component communication:\n\n-   The `Garden` component is composed of `Plant` components, so clicking on the plant fires an event that the `Garden` listens to (to remove the plant).\n-   The `GardenMain` component is composed of a `Garden` and a `DisplayCase` component, so clicking the Gather button fires an event that the `GardenMain` uses to add the plants to the display case.\n",
        "display-case.component.html": "Display Case:\n\n<div id=\"rows\"></div>\n",
        "display-case.component.test.ts": "import { describe, expect, test, beforeAll } from \"@jest/globals\";\nimport { DisplayCaseComponent } from \"./display-case.component\";\nimport { bootstrap } from \"@gsilber/webez\";\n\ndescribe(\"DisplayCaseComponent\", () => {\n    let component: any = undefined;\n    beforeAll(() => {\n        const html: string = `<div>Testing Environment</div><div id='main-target'></div>`;\n        component = bootstrap<DisplayCaseComponent>(DisplayCaseComponent, html);\n    });\n    describe(\"Constructor\", () => {\n        test(\"Create Instance\", () => {\n            expect(component).toBeInstanceOf(DisplayCaseComponent);\n        });\n    });\n});\n",
        "display-case.component.ts": "import { EzComponent } from \"@gsilber/webez\";\nimport html from \"./display-case.component.html\";\nimport css from \"./display-case.component.css\";\nimport { DisplayRowComponent } from \"../display-row/display-row.component\";\nimport { PlantComponent } from \"../plant/plant.component\";\n\nexport class DisplayCaseComponent extends EzComponent {\n    private rows: DisplayRowComponent[] = [];\n    constructor() {\n        super(html, css);\n    }\n\n    addPlants(plants: PlantComponent[]) {\n        const row = new DisplayRowComponent(plants);\n        this.addComponent(row);\n        this.rows.push(row);\n    }\n}\n",
        "display-row.component.html": "<div id=\"plants\" class=\"d-flex\"></div>\n",
        "display-row.component.test.ts": "import { describe, expect, test, beforeAll } from \"@jest/globals\";\nimport { DisplayRowComponent } from \"./display-row.component\";\nimport { bootstrap } from \"@gsilber/webez\";\n\ndescribe(\"DisplayRowComponent\", () => {\n    let component: any = undefined;\n    beforeAll(() => {\n        const html: string = `<div>Testing Environment</div><div id='main-target'></div>`;\n        component = bootstrap<DisplayRowComponent>(DisplayRowComponent, html);\n    });\n    describe(\"Constructor\", () => {\n        test(\"Create Instance\", () => {\n            expect(component).toBeInstanceOf(DisplayRowComponent);\n        });\n    });\n});\n",
        "display-row.component.ts": "import { EzComponent } from \"@gsilber/webez\";\nimport html from \"./display-row.component.html\";\nimport css from \"./display-row.component.css\";\nimport { PlantComponent } from \"../plant/plant.component\";\n\nexport class DisplayRowComponent extends EzComponent {\n    constructor(plants: PlantComponent[]) {\n        super(html, css);\n        for (let plant of plants) {\n            this.addComponent(plant, \"plants\");\n        }\n    }\n}\n",
        "garden.component.html": "<button\n    id=\"add-plant\"\n    title=\"Creates a new random flower that appears lower on the screen. You can click the flower to remove it.\"\n>\n    Plant New Flower\n</button>\n<div id=\"plants\"></div>\n<button id=\"gather\">Gather the flowers</button>\n",
        "garden.component.test.ts": "import { describe, expect, test, beforeAll } from \"@jest/globals\";\nimport { GardenComponent } from \"./garden.component\";\nimport { bootstrap } from \"@gsilber/webez\";\n\ndescribe(\"GardenComponent\", () => {\n    let component: any = undefined;\n    beforeAll(() => {\n        const html: string = `<div>Testing Environment</div><div id='main-target'></div>`;\n        component = bootstrap<GardenComponent>(GardenComponent, html);\n    });\n    describe(\"Constructor\", () => {\n        test(\"Create Instance\", () => {\n            expect(component).toBeInstanceOf(GardenComponent);\n        });\n    });\n});\n",
        "garden.component.ts": "import { Click, EventSubject, EzComponent } from \"@gsilber/webez\";\nimport html from \"./garden.component.html\";\nimport css from \"./garden.component.css\";\nimport { PlantComponent } from \"../plant/plant.component\";\n\nexport class GardenComponent extends EzComponent {\n    private plants: PlantComponent[] = [];\n    private latestId = 0;\n\n    gatherEvent: EventSubject<PlantComponent[]> = new EventSubject();\n\n    constructor() {\n        super(html, css);\n    }\n    @Click(\"add-plant\")\n    addPlant() {\n        const newPlant = new PlantComponent(this.latestId);\n        this.addComponent(newPlant, \"plants\");\n        this.plants.push(newPlant);\n        this.latestId += 1;\n        newPlant.removeEvent.subscribe((id: number) => {\n            this.removePlant(id);\n        });\n    }\n\n    removePlant(target: number) {\n        for (let i = 0; i < this.plants.length; i += 1) {\n            if (this.plants[i].getId() === target) {\n                const removedElements = this.plants.splice(i, 1);\n                for (let e of removedElements) {\n                    this.removeComponent(e);\n                }\n            }\n        }\n    }\n\n    @Click(\"gather\")\n    onGather() {\n        const removed = this.plants.splice(0, this.plants.length);\n        this.gatherEvent.next(removed);\n    }\n}\n",
        "plant.component.html": "<span id=\"pic\"></span>\n",
        "plant.component.test.ts": "import { describe, expect, test, beforeAll } from \"@jest/globals\";\nimport { PlantComponent } from \"./plant.component\";\nimport { bootstrap } from \"@gsilber/webez\";\n\ndescribe(\"PlantComponent\", () => {\n    let component: any = undefined;\n    beforeAll(() => {\n        const html: string = `<div>Testing Environment</div><div id='main-target'></div>`;\n        component = bootstrap<PlantComponent>(PlantComponent, html);\n    });\n    describe(\"Constructor\", () => {\n        test(\"Create Instance\", () => {\n            expect(component).toBeInstanceOf(PlantComponent);\n        });\n    });\n});\n",
        "plant.component.ts": "import {\n    BindAttribute,\n    BindValue,\n    Click,\n    EventSubject,\n    EzComponent,\n} from \"@gsilber/webez\";\nimport html from \"./plant.component.html\";\nimport css from \"./plant.component.css\";\n\nconst FLOWERS = [\"\u00f0\u0178\u0152\u00b1\", \"\u00f0\u0178\u0152\u00b9\", \"\u00f0\u0178\u0152\u00b7\", \"\u00f0\u0178\u0152\u00bc\", \"\u00f0\u0178\u0152\u00ba\", \"\u00f0\u0178\u0152\u00bb\"];\n\nfunction makeFlower(): string {\n    return FLOWERS[Math.floor(Math.random() * FLOWERS.length)];\n}\n\nexport class PlantComponent extends EzComponent {\n    @BindValue(\"pic\")\n    private picture: string = makeFlower();\n\n    @BindAttribute(\"pic\", \"title\", (id: number) => id.toString())\n    private id: number;\n\n    removeEvent: EventSubject<number> = new EventSubject<number>();\n\n    constructor(id: number) {\n        super(html, css);\n        this.id = id;\n    }\n\n    getId(): number {\n        return this.id;\n    }\n\n    @Click(\"pic\")\n    onPicClicked() {\n        this.removeEvent.next(this.id);\n    }\n}\n"
    },
    "joke": {
        "joke.component.html": "<p>\n    What's orange and sounds like a carrot?\n    <button id=\"reveal\">Reveal</button>\n    <span id=\"punchline\">A parrot.</span>\n</p>\n",
        "joke.component.test.ts": "import { describe, expect, test, beforeAll } from \"@jest/globals\";\nimport { JokeComponent } from \"./joke.component\";\nimport { bootstrap } from \"@gsilber/webez\";\n\ndescribe(\"JokeComponent\", () => {\n    let component: any = undefined;\n    beforeAll(() => {\n        const html: string = `<div>Testing Environment</div><div id='main-target'></div>`;\n        component = bootstrap<JokeComponent>(JokeComponent, html);\n    });\n    describe(\"Constructor\", () => {\n        test(\"Create Instance\", () => {\n            expect(component).toBeInstanceOf(JokeComponent);\n        });\n    });\n});\n",
        "joke.component.ts": "import { BindVisibleToBoolean, Click, EzComponent } from \"@gsilber/webez\";\nimport html from \"./joke.component.html\";\nimport css from \"./joke.component.css\";\n\nexport class JokeComponent extends EzComponent {\n    @BindVisibleToBoolean(\"punchline\")\n    visible: boolean = false;\n\n    constructor() {\n        super(html, css);\n    }\n\n    @Click(\"reveal\")\n    reveal() {\n        this.visible = !this.visible;\n    }\n}\n",
        "readme.md": "A short component that displays the start of a joke and a button to reveal the punchline. Uses the `@BindVisibleToBoolean` to toggle the visibility of the punchline, and the `Click` event to let the button control the state.\n"
    }
}